import telebot
import sqlite3
import datetime
import logging
import os
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–í–ê–ñ–ù–û –¥–ª—è Render)
API_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '8369809235:AAF5gKSyPMkAgyCb3a08gfjPye0dz0-zKOU')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('applications.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                application_text TEXT,
                status TEXT DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î
def save_application(user_id, username, full_name, phone, application_text):
    try:
        conn = sqlite3.connect('applications.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO applications (user_id, username, full_name, phone, application_text)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, full_name, phone, application_text))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"Error saving application: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    btn2 = types.KeyboardButton('‚ÑπÔ∏è –û –Ω–∞—Å')
    btn3 = types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫. 
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /application
    """
    main_menu(message.chat.id)
    bot.send_message(message.chat.id, welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /application
@bot.message_handler(commands=['application'])
def start_application(message):
    user_id = message.from_user.id
    user_data[user_id] = {'step': 1}
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    remove_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n\n–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û):", 
                     reply_markup=remove_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@bot.message_handler(func=lambda message: message.text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
def handle_application_button(message):
    start_application(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –Ω–∞—Å')
def handle_about(message):
    about_text = """
ü§ñ –û –Ω–∞—à–µ–º –±–æ—Ç–µ:

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫. 
–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

üìã –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–∞–±–æ—Ç–∞–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!
    """
    bot.send_message(message.chat.id, about_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@bot.message_handler(func=lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
def handle_contacts(message):
    contacts_text = """
üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

–¢–µ–ª–µ—Ñ–æ–Ω: +7 (918) 965-79-93
Email: -
–ê–¥—Ä–µ—Å: –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 8:30 - 16:30
–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π
    """
    bot.send_message(message.chat.id, contacts_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã)
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    user = message.from_user
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    if user_id in user_data:
        current_step = user_data[user_id].get('step', 0)
        
        if current_step == 1:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
            user_data[user_id]['full_name'] = message.text
            user_data[user_id]['step'] = 2
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_phone = types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
            markup.add(btn_phone)
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
            
        elif current_step == 2:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é)
            user_data[user_id]['phone'] = message.text
            user_data[user_id]['step'] = 3
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å:")
            
        elif current_step == 3:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            user_data[user_id]['application_text'] = message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            success = save_application(
                user_id,
                user.username,
                user_data[user_id]['full_name'],
                user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                user_data[user_id]['application_text']
            )
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                confirmation_text = f"""
‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!

üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:
‚Ä¢ –§–ò–û: {user_data[user_id]['full_name']}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {user_data[user_id]['application_text']}

–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                """
                bot.send_message(message.chat.id, confirmation_text)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                admin_chat_id = os.environ.get('ADMIN_CHAT_ID', '1060377514')
                admin_text = f"""
üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!

üë§ –ö–ª–∏–µ–Ω—Ç: {user_data[user_id]['full_name']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data[user_id]['application_text']}
üë§ Username: @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üÜî User ID: {user_id}
‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
                try:
                    bot.send_message(admin_chat_id, admin_text)
                except Exception as e:
                    logger.warning(f"Admin notification failed: {e}")
                
            else:
                bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu(message.chat.id)
    
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞—è–≤–∫–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        main_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get('step') == 2:
        phone_number = message.contact.phone_number
        user_data[user_id]['phone'] = phone_number
        user_data[user_id]['step'] = 3
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        remove_markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å:", 
                         reply_markup=remove_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.reply_to(message, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
def check_bot():
    try:
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫...")
    init_db()
    
    if check_bot():
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å...")
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")

